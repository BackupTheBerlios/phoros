DATABASE STRUCTURE CRITIQUE.  Look for "TODO:" items.


######################################################################

                              Tabelle »public.sys_users«
     Spalte     |          Typ           |                 Attribute                  
----------------+------------------------+--------------------------------------------
 user_name      | character varying(30)  | not null Vorgabewert ''::character varying
 user_password  | character varying(30)  | not null Vorgabewert ''::character varying
 user_full_name | character varying(100) | not null Vorgabewert ''::character varying
 user_id        | integer                | not null Vorgabewert 0
Indexe:
    "pk_sys_users" PRIMARY KEY, btree (user_name)
Trigger:
    _roadview_logtrigger_139 AFTER INSERT OR DELETE OR UPDATE ON sys_users FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '139', 'kvvv')



######################################################################

TODO: new table project_users

user_id
project_id
role


######################################################################

                                 Tabelle »public.projects«
     Spalte      |          Typ           |                   Attribute                    
-----------------+------------------------+------------------------------------------------
 project_id      | integer                | not null
 project_name    | character varying(254) | not null Vorgabewert ''::character varying
 table_name      | character varying(50)  | not null Vorgabewert 'ccd_'::character varying
 table_name_netz | character varying(50)  | not null Vorgabewert ''::character varying
Indexe:
    "pk_projects" PRIMARY KEY, btree (project_id)
Trigger:
    _roadview_logtrigger_114 AFTER INSERT OR DELETE OR UPDATE ON projects FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '114', 'kvvv')


######################################################################

                          Tabelle »public.projects_measurements«
       Spalte       |          Typ           |                 Attribute                  
--------------------+------------------------+--------------------------------------------
 project_id         | integer                | not null
 measurement_id     | integer                | not null
 name               | character varying(254) | not null Vorgabewert ''::character varying
 pictures_path      | character varying(254) | not null Vorgabewert ''::character varying
 cam_id_left        | integer                | not null Vorgabewert 1 TODO: JUNK
 cam_id_right       | integer                | not null Vorgabewert 2 TODO: JUNK
 calib_set_id_left  | integer                | not null Vorgabewert 1 TODO: needs parameterization (calib_set 1 ... n) TODO: JUNK
 calib_set_id_right | integer                | not null Vorgabewert 2 TODO: needs parameterization (calib_set 1 ... n) TODO: JUNK
Indexe:
    "pk_measurement" PRIMARY KEY, btree (project_id, measurement_id)
Trigger:
    _roadview_logtrigger_117 AFTER INSERT OR DELETE OR UPDATE ON projects_measurements FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '117', 'kkvvvvvv')


######################################################################

                                Tabelle »public.motorrad_ccd« TODO: rename to motorrad_points
         Spalte         |          Typ           |                 Attribute                  
------------------------+------------------------+--------------------------------------------
 point_id               | integer                | not null
 measurement_id         | integer                | not null
 picture_no             | integer                | not null TODO: JUNK
 cam                    | integer                | not null TODO: rename into recorded_device_id
 channels               | integer                | not null TODO: JUNK
 compressed             | integer                | not null TODO: JUNK
 datasize               | integer                | not null TODO: JUNK
 height                 | integer                | not null TODO: JUNK
 width                  | integer                | not null TODO: JUNK
 gain                   | double precision       | not null TODO: move into table motorrad_photos
 shutter                | double precision       | not null TODO: move into table motorrad_photos
 time                   | double precision       | not null TODO: JUNK
 timetrigger            | double precision       | not null TODO: rename into trigger_time
 trigger_time_faked       boolean
 whitebalance           | double precision       | not null TODO: delete or move into table motorrad_photos
 time_appl              | double precision       | not null TODO: JUNK
 time_appl_utc          | double precision       | not null TODO: put this into the_geom if possible
 distance               | double precision       | not null TODO: JUNK
 easting                | double precision       | not null TODO: JUNK
 northing               | double precision       | not null TODO: JUNK
 ellipsoid_height       | double precision       | not null TODO: put this into the_geom
 latitude               | double precision       | not null TODO: put this into the_geom
 longitude              | double precision       | not null TODO: put this into the_geom
 ellipsoid_height_wgs84 | double precision       | not null TODO: JUNK
 roll                   | double precision       | not null
 pitch                  | double precision       | not null
 heading                | double precision       | not null
 east_velocity          | double precision       | not null
 north_velocity         | double precision       | not null
 up_velocity            | double precision       | not null
 east_sd                | double precision       | not null
 north_sd               | double precision       | not null
 height_sd              | double precision       | not null
 roll_sd                | double precision       | not null
 pitch_sd               | double precision       | not null
 heading_sd             | double precision       | not null
 filename               | character varying(254) | not null Vorgabewert ''::character varying
 byte_position            integer
 the_geom               | geometry               | 
Indexe:
    "pk_motorrad_ccd" PRIMARY KEY, btree (measurement_id, picture_no, cam)
    "gist_motorrad_ccd" gist (the_geom)
Check-Constraints:
    "enforce_dims_the_geom" CHECK (ndims(the_geom) = 2)
    "enforce_geotype_the_geom" CHECK (geometrytype(the_geom) = 'POINT'::text OR the_geom IS NULL)
    "enforce_srid_the_geom" CHECK (srid(the_geom) = 32632)
Trigger:
    _roadview_logtrigger_110 AFTER INSERT OR DELETE OR UPDATE ON motorrad_ccd FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '110', 'kkkvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv')


######################################################################

                                      Tabelle »public.calib_set« TODO: delete (we do mapping by time)
    Spalte    |      Typ       |                              Attribute                               
--------------+----------------+----------------------------------------------------------------------
 calib_set_id | integer        | not null Vorgabewert nextval('calib_set_calib_set_id_seq'::regclass)
 camera_id    | smallint       | 
 inner_id     | smallint       | 
 outer_id     | smallint       | 
 bore_id      | smallint       | 
 objectiv_id  | smallint       | 
 comment      | character(255) | 
Indexe:
    "pk_calib_set" PRIMARY KEY, btree (calib_set_id)
Trigger:
    _roadview_logtrigger_39 AFTER INSERT OR DELETE OR UPDATE ON calib_set FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '39', 'kvvvvvv')



######################################################################
TODO: new table camera_stage_of_life

device_stage_of_life_id (PK)
recorded_device_id
photogrammetry_version
camera_id
lens_id
vehicle_name
casing_name
computer_name
computer_interface_name
mounting_date
unmounting_date

######################################################################

                                     Tabelle »public.calib_camera« TODO: rename into camera_hardware
      Spalte       |       Typ        |                           Attribute                            
-------------------+------------------+----------------------------------------------------------------
 camera_id         | integer          | not null Vorgabewert nextval('camera_camera_id_seq'::regclass) TODO: rename into camera_hardware_id
 sensor_width_pix  | integer          | 
 sensor_height_pix | integer          | 
 channels          | integer          | 
 pix_size          | double precision | 
 serial_number     | character(255)   | 
 name              | character(255)   | 
 angle180          | integer          | not null Vorgabewert 0
Indexe:
    "pk_cameras" PRIMARY KEY, btree (camera_id)
Trigger:
    _roadview_logtrigger_35 AFTER INSERT OR DELETE OR UPDATE ON calib_camera FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '35', 'kvvvvvvv')



######################################################################

                                    Tabelle »public.calib_objectiv« TODO: rename into camera_lens
    Spalte     |       Typ        |                             Attribute                              
---------------+------------------+--------------------------------------------------------------------
 objectiv_id   | integer          | not null Vorgabewert nextval('objectiv_objectiv_id_seq'::regclass) TODO: rename into lens_id
 focal_length  | double precision | 
 serial_number | character(255)   | 
 name          | character(255)   | 
Indexe:
    "pk_objectiv" PRIMARY KEY, btree (objectiv_id)
Fremdschlüsselverweise von:
    TABLE "calib_inner_orientation" CONSTRAINT "objectiv" FOREIGN KEY (id_objectiv) REFERENCES calib_objectiv(objectiv_id)
Trigger:
    _roadview_logtrigger_37 AFTER INSERT OR DELETE OR UPDATE ON calib_objectiv FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '37', 'kvvv')



######################################################################

                                 Tabelle »public.calib_outer_orientation« TODO: rename into camera_outer_orientation
  Spalte   |       Typ        |                                 Attribute                                 
-----------+------------------+---------------------------------------------------------------------------
 outer_id  | integer          | not null Vorgabewert nextval('outher_orientation_outer_id_seq'::regclass)
 date      | abstime          | 
 name      | character(255)   | 
 comments  | character(255)   | 
 dx        | double precision | TODO: currently in mm, should be m.
 dy        | double precision | TODO: currently in mm, should be m. 
 dz        | double precision | TODO: currently in mm, should be m. 
 camera_id | bigint           | TODO: rename into camera_stage_of_life_id
 inner_id  | bigint           | TODO: JUNK
 rotx      | double precision | 
 roty      | double precision | 
 rotz      | double precision | 
Indexe:
    "pk_outer" PRIMARY KEY, btree (outer_id)
Trigger:
    _roadview_logtrigger_38 AFTER INSERT OR DELETE OR UPDATE ON calib_outer_orientation FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '38', 'kvvvvvvvvvvv')

######################################################################

                                   Tabelle »public.calib_inner_orientation« TODO: rename into camera_inner_orientation
     Spalte     |       Typ        |                                Attribute                                 
----------------+------------------+--------------------------------------------------------------------------
 inner_id       | integer          | not null Vorgabewert nextval('inner_orientation_inner_id_seq'::regclass)
 calib_date     | abstime          | TODO: rename into date
 calib_person   | character(255)   | TODO: rename into name
 calib_comments | character(255)   | TODO: rename into comments
 focal_length   | double precision | TODO: JUNK
 xh             | double precision | 
 yh             | double precision | 
 a1             | double precision | 
 a2             | double precision | 
 a3             | double precision | 
 b1             | double precision | 
 b2             | double precision | 
 c1             | double precision | 
 c2             | double precision | 
 r0             | double precision | 
 id_camera      | bigint           |  TODO: rename into camera_stage_of_life_id
 id_objectiv    | bigint           |  TODO: JUNK
 c              | double precision | not null Vorgabewert 0
Indexe:
    "pk_inner" PRIMARY KEY, btree (inner_id)
Fremdschlüssel-Constraints:
    "objectiv" FOREIGN KEY (id_objectiv) REFERENCES calib_objectiv(objectiv_id)
Trigger:
    _roadview_logtrigger_36 AFTER INSERT OR DELETE OR UPDATE ON calib_inner_orientation FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '36', 'kvvvvvvvvvvvvvvvvv')


######################################################################

                                  Tabelle »public.calib_boreside_alignement« TODO: rename into camera_boresight_alignment
  Spalte   |       Typ        |                                   Attribute                                   
-----------+------------------+-------------------------------------------------------------------------------
 bore_id   | integer          | not null Vorgabewert nextval('boreside_alignement_boreside_id_seq'::regclass)
 date      | abstime          | 
 name      | character(255)   | 
 comments  | character(255)   | 
 bdx       | double precision | 
 bdy       | double precision | 
 bdz       | double precision | 
 bddx       | double precision | 
 bddy       | double precision | 
 bddz       | double precision | 
 camera_id | bigint           | TODO: rename into camera_stage_of_life_id
 inner_id  | bigint           | TODO: JUNK
 brotx     | double precision | 
 broty     | double precision | 
 brotz     | double precision | 
 bdrotx     | double precision | 
 bdroty     | double precision | 
 bdrotz     | double precision | 
Indexe:
    "pk_boreside" PRIMARY KEY, btree (bore_id)
Trigger:
    _roadview_logtrigger_34 AFTER INSERT OR DELETE OR UPDATE ON calib_boreside_alignement FOR EACH ROW EXECUTE PROCEDURE _roadview.logtrigger('_roadview', '34', 'kvvvvvvvvvvv')
